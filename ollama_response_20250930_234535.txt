Ollama response to prompt:
Context:

--- Content from otto_aviation_overview.txt ---
Otto Aviation is an aerospace company focused on developing innovative aircraft designs. Their flagship model, the Celera, aims to revolutionize private air travel with improved fuel efficiency and aerodynamic performance.
--- Content from celera_technical_specs.txt ---
The Celera aircraft features a laminar flow fuselage, a single pusher propeller configuration, and a highly efficient diesel engine. It is designed to achieve a cruise speed of 460 mph and a range of 4,500 miles while consuming significantly less fuel than traditional jets.
--- Content from market_analysis_summary.txt ---
Market analysis indicates a growing demand for cost-effective and environmentally friendly private air travel solutions. Otto Aviation's Celera is positioned to capture market share by offering lower operating costs and reduced carbon emissions.

Query:
from flask import Flask, render_template_string, request import json import os from datetime import datetime  app = Flask(__name__)  # HTML template with Otto Aerospace-inspired styling HTML_TEMPLATE = """ <!DOCTYPE html> <html lang="en"> <head>     <meta charset="UTF-8">     <title>MCP Client Demo</title>     <style>         body {             background-color: #0a0f1c;             color: #e0e6f0;             font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;             display: flex;             justify-content: center;             padding: 40px;         }         .container {             background-color: #121a2f;             padding: 30px;             border-radius: 12px;             box-shadow: 0 0 20px rgba(0, 123, 255, 0.3);             width: 100%;             max-width: 700px;         }         h1 {             color: #00bfff;             text-align: center;         }         label {             display: block;             margin-top: 15px;             font-weight: bold;         }         input[type="text"], textarea {             width: 100%;             padding: 10px;             margin-top: 5px;             border-radius: 6px;             border: none;             background-color: #1e2a47;             color: #ffffff;         }         input[type="checkbox"] {             margin-right: 10px;         }         button {             margin-top: 20px;             background-color: #00bfff;             color: #0a0f1c;             padding: 10px 20px;             border: none;             border-radius: 6px;             font-weight: bold;             cursor: pointer;         }         .response-box {             margin-top: 30px;             background-color: #1e2a47;             padding: 20px;             border-radius: 8px;             white-space: pre-wrap;         }         .error {             color: #ff6b6b;             font-weight: bold;         }     </style> </head> <body>     <div class="container">         <h1>MCP Client Demo</h1>         {% if error %}             <p class="error">{{ error }}</p>         {% endif %}         <form method="post">             <label for="query">Query:</label>             <input type="text" id="query" name="query" value="{{ query }}" required>              <label>                 <input type="checkbox" name="inject_facts" {% if inject_facts %}checked{% endif %}>                 Inject Facts from Context Files             </label>              <button type="submit">Submit</button>         </form>          {% if response %}             <div class="response-box">                 <strong>Response:</strong><br>                 {{ response }}             </div>         {% endif %}     </div> </body> </html> """  @app.route("/", methods=["GET", "POST"]) def index():     query = ""     inject_facts = True     response = ""     error = ""      # Load input configuration     try:         with open("mcp_input.json", "r") as f:             config = json.load(f)     except Exception as e:         return render_template_string(HTML_TEMPLATE, error="Missing or invalid mcp_input.json file.", query="", inject_facts=True, response="")      if request.method == "POST":         query = request.form.get("query", "")         inject_facts = "inject_facts" in request.form          context_text = ""         if inject_facts:             for filename in config.get("context_sources", []):                 if os.path.exists(filename):                     with open(filename, "r") as f:                         context_text += f"\n--- Content from {filename} ---\n"                         context_text += f.read()                 else:                     context_text += f"\n--- {filename} not found ---\n"          prompt = f"Context:\n{context_text}\n\nQuery:\n{query}"         simulated_response = f"Ollama response to prompt:\n{prompt}"          # Save response to timestamped file         timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")         response_filename = f"ollama_response_{timestamp}.txt"         with open(response_filename, "w") as f:             f.write(simulated_response)          response = simulated_response      return render_template_string(HTML_TEMPLATE, query=query, inject_facts=inject_facts, response=response, error=error)  if __name__ == "__main__":     app.run(debug=True)